//******************************************************************************
// 変数
//******************************************************************************
//各シェル情報
dict dictShellInfo;
//中身はこんな感じ
/*
{
    "シェル名1":{
        "attribute":[
            "属性名1",
            "属性名2",
            "属性名3"
        ],
        "authorName":"作者名1",
        "imagePath":"img\hoge.jpg",
        "summary":"紹介1",
        "webSiteName":"配布元名1"
    },
    "シェル名2":{
        "attribute":[
            "属性名1",
            "属性名3",
            "属性名5"
        ],
        "authorName":"作者名2",
        "imagePath":"img\r_piyo.png",
        "summary":"紹介2",
        "webSiteName":"配布元名2"
    }
}
*/

//タグ情報
dict dictTagInfo;
//中身はこんな感じ shellListは明示的に取得して初めてセットされる
/*
{
    "attribute":[
        {
            "name":"属性名1",
            "wikiUrl":"https://wikiwiki.jp/feeshell/hoge"
        },
        {
            "name":"属性名2",
            "shellList":[
                {
                    "shellName":"シェル名1",
                    "wikiUrl":"https://wikiwiki.jp/feeshell/fuga"
                },
                {
                    "shellName":"シェル名2",
                    "wikiUrl":"https://wikiwiki.jp/feeshell/piyo"
                }
            ],
            "wikiUrl":"https://wikiwiki.jp/feeshell/hemo"
        },
    ],
    "author":[
        {
            "name":"作者名1",
            "wikiUrl":"https://wikiwiki.jp/feeshell/moke"
        },
        {
            "name":"作者名2",
            "shellList":[
                {
                    "shellName":"シェル名1",
                    "wikiUrl":"https://wikiwiki.jp/feeshell/fuga"
                },
                {
                    "shellName":"シェル名3",
                    "wikiUrl":"https://wikiwiki.jp/feeshell/foo"
                }
            ],
            "wikiUrl":"https://wikiwiki.jp/feeshell/bar"
        }
    ]
}
*/

//選択ページ記憶用
array arSelectedShellList;
int iSelectedIndex;
string strSelectedName;
//表示切り替え用
int enableShowingImage = 1;
int enableShowingInfo = 1;

//******************************************************************************
// スクレイピングを伴うメニュー用関数
//******************************************************************************
//------------------------------------------------------------------------------
// 属性リスト・作者リストを取得してセット
//------------------------------------------------------------------------------
makeTagInfo()
{
	dictTagInfo = ${
		$("attribute", getTagList("https://wikiwiki.jp/feeshell/%E5%B1%9E%E6%80%A7")),
		$("author", getTagList("https://wikiwiki.jp/feeshell/%E4%BD%9C%E8%80%85"))
	};
}
array getTagList(string url)
{
	array arHtml = _httpget(url, "utf8");
	string line;
	for(int i = 0; arHtml[i] != nil; i++)
	{
		if(_regex_match(arHtml[i], "^<ul class=\"lsx\">.+$"))
		{
			line = arHtml[i];
			break;
		}
	}
	line = _strreplace(line, "<ul><li>", "</li><li>");
	array arLine = _strsplit(line, "</li><li>");
	array a;
	for(int i = 1; i < _aryvn(arLine) - 1; i++)//i = 0 は "属性"or"作者" 最後は"属性ページテンプレート"
	{
		array r = _regex_search(arLine[i], "<a href=\"(.+?)\" .+>(.+)</a>.*?");
		dict dictInfo = ${
			$("name", r[2]),
			$("wikiUrl", "https://wikiwiki.jp" + r[1])
		};
		a += dictInfo;
	}
	return a;
}

//------------------------------------------------------------------------------
// 属性・作者に所属するシェル情報を付加した属性・作者リストを返す
//------------------------------------------------------------------------------
array addShellList(string name, string url, array a)
{
	array arHtml = _httpget(url, "utf8");
	string line;
	int flgContent = 0;
	for(int i = 0; arHtml[i] != nil; i++)
	{
		if(arHtml[i] == "                <div id=\"content\">")
		{
			flgContent = 1;
		}
		if (flgContent)
		{
			if(_regex_match(arHtml[i], "^<ul class=\"taglist\">.+$"))
			{
				line = arHtml[i];
				break;
			}
		}
	}
	line = _strreplace(line, "<ul><li>", "</li><li>");
	array arLine = _strsplit(line, "</li><li>");
	array arShellEelement;
	for(int i = 0; i < _aryvn(arLine); i++)
	{
		array r = _regex_search(arLine[i], "<a href=\"(.+?)\" .+>(.+)</a>.*?");
		if (r[1] != nil && r[2] != nil)
		{
			dict dictShellElement = ${
				$("shellName", r[2]),
				$("wikiUrl", "https://wikiwiki.jp" + r[1])
			};
			arShellEelement += dictShellElement;
		}
	}
	for(int i = 0; a[i] != nil; i++)
	{
		dict dictInfo = a[i];
		if (dictInfo["name"] == name)
		{
			dictInfo += ${
				$("shellList", arShellEelement)
			};
			a[i] = dictInfo;
			break;
		}
	}
	return a;
}
//------------------------------------------------------------------------------
// 選択されたシェルの情報を取得しセットする
// セット済なら何もしない
//------------------------------------------------------------------------------
setSelectedSellInfo(int i)
{
	string shellName = arSelectedShellList[i]["shellName"];
	string url = arSelectedShellList[i]["wikiUrl"];
	if (dictShellInfo[shellName] == nil)
	{
		dict dictInfo = getShellInfo(url);
		dictShellInfo += ${
			$(shellName, dictInfo)
		};
	}
}

dict getShellInfo(string url)
{
	array arHtml = _httpget(url, "utf8");
	string lineImage;
	string lineInfo;
	for(int i = 0; i < _aryvn(arHtml); i++)
	{
		//2つ画像があった場合、1つ目のみ取得する 2つ表示するのはキツイ
		if (lineImage == "")
		{
			if(_regex_match(arHtml[i], "^.*?<div class=\"img_margin\" .+?<img src=\"(.+?)\" .+? title=\"(.+?)\" width=\"(\d+?)\" height=\"(\d+?)\".+?$"))
			{
				lineImage = arHtml[i];
			}
			else
			{
				if(_regex_match(arHtml[i], "^.*?<noscript class=\"loading-lazy\"><img src=\"(.+?)\" .+? title=\"(.+?)\" width=\"(\d+?)\" height=\"(\d+?)\".+?$"))
				{
					lineImage = arHtml[i];
				}
			}
		}
		if(_regex_match(arHtml[i], "^.+?<table><tbody><tr><td.*?>シェル名</td>.+?$"))
		{
			lineInfo = arHtml[i];
			break;
		}
	}
	array r = _regex_search(lineImage, "<img src=\"(.+?)\" .+? title=\"(.+?)\" width=\"(\d+?)\" height=\"(\d+?)\"");
	int width = r[3];
	int height = r[4];
	r = {};
	r = _regex_search(lineImage, "<a href=\"(.+?)\" title=\"(.+?)\" data-lightbox=\"imageset\"");
	string imgUrl = r[1];
	string fileName = _regex_replace(r[2], "\:|\?|\"|<|>|\|", "-");
	string filePath = "img\\" + fileName;
	while(_isfile(filePath))
	{
		fileName = "_" + fileName;
		filePath = "img\\" + fileName;
	}

	string reg;
	reg += "<table><tbody><tr><td.*?>シェル名</td><td>(.+?)</td></tr>";
	reg += "<tr><td.*?>配布元</td><td>(.*?)</td></tr>";
	reg += "<tr><td.*?>作者.*?</td><td>.*?<a.*?>(.+?)</a>.*?</td></tr>";
	reg += ".*?<tr><td.*?>属性.*?</td><td>.*?Tag: (.*?) </span></td></tr>";
	reg += ".*?<tr><td.*?>紹介</td><td>(.*?)</td></tr>";
	r = _regex_search(lineInfo, reg);
	string shellName = _regex_replace(r[1], "<.+?>", "");
	string webSiteName = _regex_replace(r[2], "<.+?>", "");
	string authorName = r[3];
	string strAttribute = _regex_replace(r[4], "<.+?>", "");
	string summary = _regex_replace(r[5], "<.+?>", "");

	string pathAfter;
	if (width > 0)
	{
		_http_download(imgUrl, filePath);
		//幅300px, 高さ300px超えたらリサイズ
		if ((width > 300) || (height > 300))
		{
			if (isImageFile(filePath))
			{
				pathAfter = "img\r_" + _regex_replace(fileName, "\..+$", ".png");
				if (width > height)
				{
					resizeImage(filePath, pathAfter, 300, -1);
				}
				else
				{
					resizeImage(filePath, pathAfter, -1, 300);
				}
			}
			else
			{
				pathAfter = "";
			}
		}
		else
		{
			pathAfter = filePath;
		}
	}

	dict dictInfo = ${
		$("webSiteName", webSiteName),
		$("authorName", authorName),
		$("attribute", _strsplit(strAttribute, " ")),
		$("summary", summary),
		$("imagePath", pathAfter)
	};

	return dictInfo;
}
//******************************************************************************
// 汎用関数
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：isImageFile
//機能　：指定したファイルが画像ファイルかどうか調べる
//引数　：imagePath 調べたいファイルの相対パス(SHIORIから見た相対パス)
//戻り値：BITMAP, JPEG, PNG, GIFなら1 違ったら0
//------------------------------------------------------------------------------
int isImageFile(string imagePath)
{
	imagePath = "..\..\\" + imagePath;
	string id = "img";
	_saoriload("saori\saori-resized-png\resizedpng.dll", id);
	string filetype = _saorirequest(id, "GetImageType", imagePath)["Result"];
	_saoriunload(id);
	string acceptRegexp = "AVIF|BMP|DDS|FARBFELD|GIF|HDR|ICO|JPEG|OPENEXR|PNG|PNM|TGA|TIFF|WEBP";
	return _regex_match(filetype, acceptRegexp);
}

//------------------------------------------------------------------------------
//関数名：resizeImage
//機能　：アイコンのサイズ変更後、PNG形式で保存
//引数　：pathBefore リサイズ前の画像ファイルの相対パス(SHIORIから見た相対パス)
//引数　：pathAfter リサイズ後の画像ファイルの相対パス(SHIORIから見た相対パス)
//引数　：width リサイズ後の幅
//引数　：height リサイズ後の高さ
//------------------------------------------------------------------------------
resizeImage(string pathBefore, string pathAfter, int width, int height)
{
	pathBefore = "..\..\\" + pathBefore;
	pathAfter = "..\..\\" + pathAfter;
	string id = "img";
	_saoriload("saori\saori-resized-png\resizedpng.dll", id);
	_saorirequest(id, "ToResizedPng", pathBefore, pathAfter, width, height);
	_saoriunload(id);
}

//------------------------------------------------------------------------------
// 関数名：escapeText
// 機能　：対象文字列を\__q[...]等に入れられるようエスケープ(""で囲う)する
// 引数　：s エスケープしたい文字列
// 戻り値：エスケープされた文字列
//------------------------------------------------------------------------------
string escapeText(string s)
{
	if (_regex_match(s, "^.*[\"\\[\\],].*$")) {
		return "\"" + _strreplace(s, "\"", "\"\"") + "\"";
	}
	return s;
}

//------------------------------------------------------------------------------
//関数名：escapeAllTags
//機能　：全てのさくらスクリプトタグをエスケープ（\付加）する。
//引数　：s エスケープしたい文字列
//戻り値：エスケープされた文字列
//------------------------------------------------------------------------------
string escapeAllTags(string s)
{
	string ESCAPE_TAG_1 = _bytechar(3) + _bytechar(3);
	string ESCAPE_TAG_2 = _bytechar(4) + _bytechar(4);
	s = _strreplace(s, "\\\\", ESCAPE_TAG_1);
	s = _strreplace(s, "\\%", ESCAPE_TAG_2);
	s = _strreplace(s, "\\", "\\\\");
	s = _strreplace(s, "%", "\\%");
	s = _strreplace(s, ESCAPE_TAG_2, "\\%");
	s = _strreplace(s, ESCAPE_TAG_1, "\\\\");
	return s;
}
//------------------------------------------------------------------------------
//関数名：convertUnicode
//機能　：UnicodeのHTML表記をSakuraScript表記に変換する。
//引数　：s 変換したい文字列
//戻り値：変換された文字列
//------------------------------------------------------------------------------
string convertUnicode(string s)
{
	for (;;)
	{
		array a = _regex_search(s, "&#\d+;");
		if (_aryvn(a) == 0)
		{
			break
		}
		string s2 = _strreplace(a[0], "&#", "\_u[");
		s2 = _strreplace(s2, ";", "]");
		s = _strreplace(s, a[0], s2);
	}
	return s;
}
